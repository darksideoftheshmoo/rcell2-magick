% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tagCell.R
\name{tagCell}
\alias{tagCell}
\title{Filtrar cdata usando gráficos y dibujando regiones}
\usage{
tagCell(
  cdata,
  pdata,
  paths,
  cell_tags,
  randomize_ucids = FALSE,
  tag_box_size = 60,
  cell_resize = NULL,
  tag_channels_select = c("BF", "BF.out"),
  seed = 1,
  tmp_output_file = NULL,
  tag_ggplot = NULL,
  equalize_images = F,
  normalize_images = F,
  max.frames = 10,
  tags.df = NULL,
  verbose = 0
)
}
\arguments{
\item{cdata}{A "cdata" data.frame with the CellID variables (not the cell.data object, \code{cell.data$data}). It can be obtained from \code{cell.load.alt} or \code{load_cell_data}.}

\item{pdata}{An optional "pdata" data.frame, with positions' metadata (NULL by default).}

\item{paths}{A "paths" data.frame, with paths to the images (i.e. \code{cell.data$images}), and t.frame, position and channel information of each one. It can be obtained from \code{cell.load.alt} or \code{load_cell_data}.}

\item{cell_tags}{list of named vectors corresponding to tag groups and tags: list(named_item1 = c(option1, option2, ...), named_item2 ...).}

\item{randomize_ucids}{Randomize ucid order.}

\item{tag_box_size}{Size in pixels of the square crop of the image, around the center of the cell. A larger value is useful for larger or mode lengated cells.}

\item{cell_resize}{Resize the main image to this value in pixels (integer). NULL by default, it will fill the available horizontal space.}

\item{tag_channels_select}{a vector giving names for the image channels: c("BF", "YFP.out", etc....).}

\item{seed}{seed for random sampling of images.}

\item{tmp_output_file}{File path into which tagging information will be dumped by user request. NULL by default, to automatically create and append to a tmp file.}

\item{tag_ggplot}{A ggplot created with no data (i.e. only "aes" and a "geom"). It will be passed cdata from the current cell and displayed below. If the x-axis is "t.frame", clicking the plot will jump to the time point nearest to the click.}

\item{equalize_images}{Use magick's function to "equalize" the images.}

\item{normalize_images}{Use magick's function to "normalize" the images.}

\item{max.frames}{Max number of t.frames to render in the cell strip. Set to 0 to disable.}

\item{tags.df}{Previous tag dataframe, used to restore or view previous tags in the app (restores tags that are named in the cell_tags list).}

\item{verbose}{Print debugging messages (with levels at either 0, 1 or 2).}
}
\value{
Lots of stuff.
}
\description{
Filtrar cdata usando gráficos y dibujando regiones
}
\examples{
path <- "/mac/apesta/trololololol/"

cell.data <- rcell2::cell.load.alt(path = path)

image.paths <- cell.data$d.paths  # Si usaste load_cell es: image.paths <- rcell2::magickPaths(cell.data)

pdata <- read_tsv(paste0(path, "pdata.csv"))

cdata <- left_join(cell.data$d, pdata)

p <- ggplot() + 
  geom_line(aes(x=t.frame, y=cf.y, group=ucid))

tag_channels_select <- c("BF", "BF.out", "YFP", "YFP.out")

saved <- rcell2::tagCell(cdata,
                         pdata, 
                         image.paths,
                         cell_tags = list(far1_drop = c(TRUE,
                                                        FALSE),
                                          budding =   c("emergence",
                                                        "division", 
                                                        "shmoo_o_algo"),
                                          artifact =  c("segmentation",
                                                        "crowding",
                                                        "out_of_focus",
                                                        "interesante",
                                                        "death",
                                                        "flown_away",
                                                        "not_a_cell")
                         ),
                         tag_channels_select = tag_channels_select,
                         equalize_images = T,
                         normalize_images = F,
                         n_max = 50,
                         tag_box_size = 75,
                         cell_resize = 300,
                         tag_ggplot = p,
                         tmp_output_file = "../output/annotations/progress.csv", 
                         debug_messages = F
                         )
                         
}
