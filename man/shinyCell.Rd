% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinyCell.R
\name{shinyCell}
\alias{shinyCell}
\title{Preview images and filter data using regions in 2D plots}
\usage{
shinyCell(
  cdata,
  paths,
  pdata = NULL,
  filters = list(),
  filters.init_selected = T,
  plotType = "Dots",
  seed = 1,
  initial_facet = "",
  initial_vars = c("a.tot", "fft.stat"),
  facet_grid_option = TRUE,
  facets_scale_free = "fixed",
  n_max = 100,
  boxSize = 80,
  filter_progress_file = NULL,
  launch.browser = F,
  skip_input_check = F,
  debug_msgs = F,
  ...
)
}
\arguments{
\item{cdata}{A "cdata" data.frame with the Cell-ID variables (not the cell.data object, \code{cell.data$data}). It can be obtained from \code{get_cell_data} or \code{load_cell_data}.}

\item{paths}{A "paths" data.frame, with paths to the images (i.e. \code{cell.data$images}), and t.frame, position and channel information of each one. It can be obtained from \code{get_cell_data} or \code{load_cell_data}.}

\item{pdata}{An optional "pdata" data.frame, with positions' metadata (NULL by default).}

\item{filters}{An optional list with the filters from a previous shinyCell run (dataframes with points of 2D polygons). An empty \code{list()} by default.}

\item{plotType}{Type of the filtering plot, either: "Dots" (point scatterplot, defaut), "Hex" (2D histogram with hexagonal bins), "Density", "Pics" (a \code{cellSpread} plot).}

\item{seed}{Seed value for sampling of cell images.}

\item{initial_facet}{Initial ggplot facet formula as a string (for example: "~pos+group_1")}

\item{initial_vars}{Initial cdata variables as a character vector (defaults to \code{c('a.tot', 'fft.stat')}).}

\item{facet_grid_option}{Use ggplot's facet_grid (TRUE, default) or facet_wrap (FALSE).}

\item{facets_scale_free}{Use ggplot's facets with fixed scales (NULL, default) or free scales ("free").}

\item{boxSize}{Lateral size of the square box extracted from the original images (in pixels). 50 px by default.}

\item{filter_progress_file}{Path to an RDS file, used for saving filtering progress (in case something goes wrong). Using FALSE disables this feature. Set to NULL (the default) to let tempfile() choose a path for the RDS, or set to a valid path of your choice.}

\item{launch.browser}{Set to \code{'firefox'} or equivalent to launch the app in-browser (\code{FALSE} by default). Useful when launching fails with error \code{Error in utils::browseURL(appUrl)} or similar.}

\item{skip_input_check}{If FALSE (default)}

\item{debug_msgs}{If FALSE (default) all internal output will be captured. Set to TRUE to print all messages, useful for debugging}

\item{...}{
  Arguments passed on to \code{\link[=magickCell]{magickCell}}
  \describe{
    \item{\code{max_composite_size}}{Maximum size of the final composite image (this resize is applied last) in pixels. 1000 by default.}
    \item{\code{cell_resize}}{Resize string for the individual cell images (\code{NULL} translates to \code{boxSize}x\code{boxSize} by default).}
    \item{\code{n.cells}}{Maximum number of cells to display (integer, set to \code{NULL} to display all cells in \code{cdata}).}
    \item{\code{equalize_images}}{Use magick's function to "equalize" the image when TRUE (FALSE by default). Can be a logical vector, each value applied separately to each channel (recycled to the length of \code{ch}).}
    \item{\code{normalize_images}}{Use magick's function to "normalize" the image when TRUE (FALSE by default). Can be a logical vector, each value applied separately to each channel (recycled to the length of \code{ch}).}
    \item{\code{customize_images}}{Use a custom magick-like function to "customize" the image when TRUE (FALSE by default). Can be a logical vector, each value applied separately to each channel (recycled to the length of \code{ch}).}
    \item{\code{image_customize}}{A custom magick-like function to "customize" the channels specified in \code{customize_images}. Defaults to NULL (disabled).}
    \item{\code{ch}}{Name of the CellID channel (BF, BF.out, RFP, etc.). "BF.out" by default, use a vector to select more than one channel simultaneously (images will be stacked).}
    \item{\code{sortVar}}{Variable name used to sort the rows (after sampling if a \code{seed} was specified). NULL by default, to skip sorting.}
    \item{\code{.debug}}{Print more messages if TRUE.}
    \item{\code{return_single_imgs}}{If TRUE, return a vector of images instead of a tile.}
    \item{\code{return_ucid_df}}{If TRUE, return is a list of magick images and ucid dataframes.}
    \item{\code{annotation_params}}{Set to NULL to skip annotations, or a named list with values of length one for magick::annotate options (i.e. one or more of the names "color" "background" "size"). Note that size close to zero can be invisible.}
    \item{\code{add_border}}{Add a 1x1 border to the pictures. Useful for stacking/appending.}
    \item{\code{stack_vertical_first}}{Set to TRUE to stack images vertically first (useful when \code{return_single_imgs = T}).}
    \item{\code{return_raw}}{Returns loaded images prematurely (i.e. without any processing other than magick::image_read and magick::image_crop).}
    \item{\code{crop_images}}{Whether to crop images to a box centered on the cell's XY position (TRUE, default), or the full image (FALSE).}
    \item{\code{fill_cdata}}{If TRUE, the time frames in the paths dataframe will be used to generate missing frames in cdata for a given ucid. It is meant to be used with cdata containing one unique ucid.}
    \item{\code{highlight_fames}}{Pass an array of t.frames, and the cells with matching frames will be highlighted with a yellow border yellow. This overrides other highlights.}
  }}
}
\value{
A named list with the original cdata and a list of filters. The cdata includes an extra "filter" column, indicating if a row is to be kept (TRUE) or filtered out (FALSE). The list of filters can be passed as a filter argument, and can be plotted with \code{plot_filters}.
}
\description{
This R-Shiny app helps the user browse the dataset graphically.
}
\details{
The filtering logic in the "Filter mode" setting is documented and implemented in \code{\link{polyFilterApply}}.
Briefly, it defines the priority of exclusion and inclusion filters: which of them should override the other?
}
\examples{

# Minimal example:

path <- "/path/to_your/cellid_images/"

cell.data <- rcell2::get_cell_data(path = path)

cdata <- cell.data$data  # CellID dataframe

images <- cell.data$images  # Image paths

pdata <- read.csv("data/pdata.csv")  # "Position" metadata

filter.output <- 
  rcell2::shinyCell(cdata = cdata, 
                    pdata = pdata, 
                    paths = images)
                    
plot_filter(filter.output)

cdata.filtered <- dplyr::filter(filter.output, filter)
  
}
\seealso{
\link{magickCell}
}
